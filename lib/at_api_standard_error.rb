class AtAPIStandardError < StandardError
  SUCCESS = '00000000'
  ERRORS = {
    'AP001000' => '必須項目が入力されていません。ユーザIDを入力してください。',
    'AP001001' => '必須項目が入力されていません。パスワードを入力してください。',
    'AP001002' => 'ログイン情報が正しくありません。ご確認のうえ、もう一度入力してください。',
    'AP001003' => '入力したパスワードに誤りがあります。 ご確認のうえ、もう一度入力してください。',
    'AP001005' => 'ユーザIDが重複しています。ご確認のうえ、もう一度ご入力ください。',
    'AP001017' => '登録されているデータがありません。',
    'AP001027' => 'ユーザ情報の削除中に、エラーが発生しました。',
    'AP001028' => 'ユーザIDの情報が一致しません。ご確認のうえ、もう一度お取引ください。',
    'AP002001' => '必須項目が入力されていません。金融IDを入力してください。',
    'AP002002' => '無効な金融IDです。ご確認のうえ、もう一度お取引ください。',
    'AP002005' => '必須項目が入力されていません。照会開始日を入力してください。',
    'AP002006' => '必須項目が入力されていません。照会終了日を入力してください。',
    'AP002007' => '照会開始日フォーマットエラーです。ご確認のうえ、もう一度お取引ください。',
    'AP002008' => '照会終了日フォーマットエラーです。ご確認のうえ、もう一度お取引ください。',
    'AP002011' => '必須項目が入力されていません。機関コードを入力してください。',
    'AP002015' => '既に登録されているカード情報です。ご確認のうえ、もう一度お取引ください。',
    'AP002017' => '既に登録されている口座番号です。ご確認のうえ、もう一度お取引ください。',
    'AP002041' => '進行中の作業があります。ご確認のうえ、もう一度お取引ください。',
    'AP002063' => '必須項目が入力されていません。金融機関情報を入力してください。',
    'AP002080' => '有効なトークンではありません。 金融機関情報の修正を行うか、登録されている金融機関情報を削除し、金融機関の登録からやり直してください。',
    'AP002082' => '必須項目が入力されていません。次のいずれかを入力してください。（照会開始日/照会終了日/次の一連番号）',
    'AP002083' => '次の一連番号は数字のみ入力できます。ご確認のうえ、もう一度入力してください。',
    'CC000001' => '処理中にエラーが発生しました。担当者までお問い合わせください。',
    'CC000002' => '必須項目が入力されていません。TOKEN KEYを入力してください。',
    'CC000004' => '応答待ちでタイムアウトしました。お手数ですが、もう一度お取引ください。',
    'CC000005' => 'TOKEN KEYが無効です。',
    'CC000009' => '存在しないTOKEN KEYです。ご確認のうえ、もう一度お取引ください。',
    'CC000024' => '無効な機関コードです。ご確認のうえ、もう一度お取引ください。',
    'CC000026' => '無効な業務区分です。ご確認のうえ、もう一度お取引ください。',
    'CC999999' => '只今システムメンテナンス中です。メンテナンス完了まで、今しばらくお待ちください。（XXXX年 XX/XX XX:XX ～ XXXX年XX/XX XX:XX）',
  }.freeze

  def initialize(error_code, message)
    @code = error_code
    @message = message
    super("[#{error_code}] - #{message}")
  end

  def self.exception(error_code, message)
    self.new(error_code, message)
  end

  def self.throw(error_code)
    self.new(error_code, error_message(error_code))
  end

  def self.error_message(error_code)
    self::ERRORS[error_code]
  end  

  attr_reader :code, :message
end
